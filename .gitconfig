[core]
        editor = nvim
        excludesfile = ~/.gitignore
[user]
        name  = zioufang
        email = zioufang@gmail.com
[help]
        autocorrect = 1
[alias]
        # list aliases
        aliases = config --get-regexp alias

        # status
        s = status -s

        # checkout
        c = checkout

        # diff
        d = diff

        # add and commit
        ac = !git add . && git commit -am

        # commit and push
        cp = "!f() { git add . && git commit -am \"$@\" && git push; }; f"

        # undo last commit
        undo = reset --soft HEAD~1

        # view log graph
        graph = log --pretty=oneline --graph --abbrev-commit # add '-n <number>' to view the latest <number> commits

        # amend the last commit without changing the commit message
        amend = !git add . && git commit -a --amend --no-edit

        # 'force pull' overwrite current branch from remote
        pullf = "!f() { \
                declare currentBranch=$(git symbolic-ref --short HEAD); \
                read -p \"this will overwrite $currentBranch branch (y/n) \" -n 1; \
                echo ''; \
                if [[ $REPLY =~ ^[Yy]$ ]]; then \
                    git fetch --all; \
                    git reset --hard origin/$currentBranch; \
                fi; \
            }; f"

        # find commits by commit message
        findm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

        # Remove branches that have already been merged with master
        # a.k.a. ‘delete merged’
        dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

        # Merge GitHub pull request on top of the current branch or,
        # if a branch name is specified, on top of the specified branch
        mpr = "!f() { \
            declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
            declare branch=\"${2:-$currentBranch}\"; \
            if [ $(printf \"%s\" \"$1\" | grep "^[0-9]\\+$" > /dev/null; printf $?) -eq 0 ]; then \
                git fetch origin refs/pull/$1/head:pr/$1 && \
                git checkout -B $branch && \
                git rebase $branch pr/$1 && \
                git checkout -B $branch && \
                git merge pr/$1 && \
                git branch -D pr/$1 && \
                git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
            fi \
        }; f"
